{"version":3,"sources":["components/Login.jsx","hooks/useLocalStorage.js","contexts/ContactsProvider.js","contexts/SocketProvider.js","contexts/ConversationsProvider.js","components/CheckedAvatar.jsx","components/NewGroup.jsx","components/HomeMenu.jsx","components/NewContact.jsx","components/Sidebar.jsx","components/MessageOut.jsx","components/OpenConversation.jsx","components/Dashboard.jsx","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","margin","spacing","width","shadow","boxShadow","paddingTop","marginTop","overflow","createTheme","palette","primary","green","ColorButton","withStyles","color","getContrastText","backgroundColor","borderRadius","Button","WhiteButton","border","Login","onIdSubmit","getUser","classes","idRef","useRef","Container","className","onSubmit","e","preventDefault","target","user","value","current","autoComplete","ThemeProvider","TextField","label","variant","id","inputRef","required","name","defaultValue","onClick","uuidV4","type","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","prevContacts","SocketContext","SocketProvider","socket","setSocket","newSocket","io","transports","query","close","ConversationsContext","useConversations","ConversationsProvider","recipients","messages","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","formattedConversations","map","conversation","index","recipient","contact","find","message","sender","fromMe","senderName","selected","addMessageToConversation","useCallback","text","prevConversations","madeChange","newMessage","newConversations","a","b","length","sort","every","element","on","off","selectedConversation","sendMessage","emit","selectConversationIndex","createConversation","CheckedAvatar","Avatar","list","menuButton","position","padding","marginLeft","appBar","background","height","NewGroup","isOpen","selectedContactIds","setSelectedContactIds","handleSubmit","style","List","FormGroup","ListItem","button","contactId","prev","includes","filter","prevId","ListItemIcon","ListItemText","Divider","light","Drawer","anchor","open","elevation","onClose","AppBar","Toolbar","IconButton","edge","fontSize","fontWeight","top","bottom","left","minHeight","maxHeight","justifyContent","alignItems","Zoom","in","Fab","size","marginBottom","HomeMenu","anchorEl","setAnchorEl","setDrawerOpen","setModalOpen","handleClose","Menu","keepMounted","Boolean","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","clear","window","location","reload","box","NewContact","modalOpen","nameRef","Modal","closeAfterTransition","BackdropProps","timeout","Fade","right","autoFocus","paddingLeft","borderBottom","drawer","flexShrink","drawerPaper","menu","maxWidth","zIndex","content","flexGrow","default","scroll","paddingRight","Sidebar","username","drawerOpen","secondary","r","join","concat","CssBaseline","paper","Typography","event","currentTarget","borderTop","borderRight","MessageOut","xmlns","viewBox","opacity","d","fill","OpenConversation","lastMessageRef","node","scrollIntoView","smooth","setText","trim","flexDirection","backgroundImage","backgroundSize","backgroundPosition","ref","alignSelf","overflowWrap","Paper","component","square","witdh","InputBase","multiline","rowsMax","onKeyUp","shiftKey","code","onChange","placeholder","inputProps","Dashboard","App","setId","setUser","dashboard","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b0c6e56.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {\r\n  ThemeProvider,\r\n  withStyles,\r\n  makeStyles,\r\n  createTheme,\r\n} from \"@material-ui/core/styles\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n    width: \"90%\",\r\n  },\r\n  shadow: {\r\n    boxShadow: \"0px 8px 15px rgba(0, 0, 0, 0.3)\",\r\n    width: \"50%\",\r\n    paddingTop: \"15px\",\r\n    marginTop: \"10px\",\r\n    overflow: \"hidden scroll\",\r\n  },\r\n}));\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: green,\r\n  },\r\n});\r\n\r\nconst ColorButton = withStyles((theme) => ({\r\n  root: {\r\n    color: theme.palette.getContrastText(\"#000\"),\r\n    backgroundColor: green[500],\r\n    borderRadius: \"0px\",\r\n    width: \"30%\",\r\n    \"&:hover\": {\r\n      backgroundColor: green[700],\r\n    },\r\n  },\r\n}))(Button);\r\n\r\nconst WhiteButton = withStyles((theme) => ({\r\n  root: {\r\n    color: theme.palette.getContrastText(\"#fff\"),\r\n    backgroundColor: \"#fff\",\r\n    border: \"1px solid #cccdcd\",\r\n    borderRadius: \"0px\",\r\n    width: \"30%\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"ligthgrey\",\r\n    },\r\n  },\r\n}))(Button);\r\n\r\nexport default function Login({ onIdSubmit, getUser }) {\r\n  const classes = useStyles();\r\n  const idRef = useRef();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    getUser(e.target.user.value);\r\n    onIdSubmit(idRef.current.value);\r\n  }\r\n\r\n  function createNewId() {\r\n    getUser(\"WhatsApp\");\r\n    onIdSubmit(uuidV4());\r\n  }\r\n\r\n  return (\r\n    <Container className={classes.shadow}>\r\n      <form className={classes.root} onSubmit={handleSubmit} autoComplete=\"off\">\r\n        <ThemeProvider theme={theme}>\r\n          <TextField\r\n            className={classes.margin}\r\n            label=\"Id\"\r\n            variant=\"standard\"\r\n            id=\"mui-theme-provider-standard-input1\"\r\n            inputRef={idRef}\r\n            required\r\n          />\r\n          <TextField\r\n            className={classes.margin}\r\n            label=\"User Name\"\r\n            name=\"user\"\r\n            defaultValue=\"WhatsApp\"\r\n            variant=\"standard\"\r\n            id=\"mui-theme-provider-standard-input2\"\r\n          />\r\n        </ThemeProvider>\r\n        <WhiteButton onClick={createNewId} className={classes.margin}>\r\n          Create Id\r\n        </WhiteButton>\r\n        <ColorButton type=\"submit\" className={classes.margin}>\r\n          Login\r\n        </ColorButton>\r\n      </form>\r\n    </Container>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst PREFIX = \"whatsapp-clone-\";\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key;\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey);\r\n    if (jsonValue != null) return JSON.parse(jsonValue);\r\n    if (typeof initialValue === \"function\") {\r\n      return initialValue();\r\n    } else {\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\r\n  }, [prefixedKey, value]);\r\n\r\n  return [value, setValue];\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\nconst ContactsContext = React.createContext();\r\n\r\nexport function useContacts() {\r\n  return useContext(ContactsContext);\r\n}\r\n\r\nexport function ContactsProvider({ children }) {\r\n  const [contacts, setContacts] = useLocalStorage(\"contacts\", [\r\n    { id: \"a\", name: \"userA\" },\r\n  ]);\r\n\r\n  function createContact(id, name) {\r\n    setContacts((prevContacts) => {\r\n      if (prevContacts) return [...prevContacts, { id, name }];\r\n      else return [{ id, name }];\r\n    });\r\n  }\r\n\r\n  return (\r\n    <ContactsContext.Provider value={{ contacts, createContact }}>\r\n      {children}\r\n    </ContactsContext.Provider>\r\n  );\r\n}\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst SocketContext = React.createContext();\r\n\r\nexport function useSocket() {\r\n  return useContext(SocketContext);\r\n}\r\n\r\nexport function SocketProvider({ id, children }) {\r\n  const [socket, setSocket] = useState();\r\n\r\n  useEffect(() => {\r\n    // const url = \"http://localhost:5000\";\r\n    const url = \"https://limitless-escarpment-52108.herokuapp.com/\";\r\n\r\n    const newSocket = io(url, {\r\n      transports: [\"websocket\", \"polling\", \"flashsocket\"],\r\n      query: { id },\r\n    });\r\n    setSocket(newSocket);\r\n\r\n    return () => newSocket.close();\r\n  }, [id]);\r\n\r\n  return (\r\n    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>\r\n  );\r\n}\r\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport { useContacts } from \"./ContactsProvider\";\r\nimport { useSocket } from \"./SocketProvider\";\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n  const [conversations, setConversations] = useLocalStorage(\"conversations\", [\r\n    { recipients: [\"a\"], messages: [] },\r\n  ]);\r\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\r\n\r\n  const { contacts } = useContacts();\r\n  const socket = useSocket();\r\n\r\n  function createConversation(recipients) {\r\n    setConversations((prevConversations) => {\r\n      if (prevConversations)\r\n        return [...prevConversations, { recipients, messages: [] }];\r\n      else return [{ recipients, messages: [] }];\r\n    });\r\n  }\r\n\r\n  const formattedConversations = conversations.map((conversation, index) => {\r\n    const recipients = conversation.recipients.map((recipient) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === recipient;\r\n      });\r\n\r\n      const name = (contact && contact.name) || recipient;\r\n      return { id: recipient, name };\r\n    });\r\n\r\n    const messages = conversation.messages.map((message) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === message.sender;\r\n      });\r\n      const name = (contact && contact.name) || message.sender;\r\n      const fromMe = id === message.sender;\r\n      return { ...message, senderName: name, fromMe };\r\n    });\r\n\r\n    const selected = index === selectedConversationIndex;\r\n    return { ...conversation, messages, recipients, selected, index };\r\n  });\r\n\r\n  const addMessageToConversation = useCallback(\r\n    ({ recipients, text, sender }) => {\r\n      setConversations((prevConversations) => {\r\n        let madeChange = false;\r\n        const newMessage = { sender, text };\r\n        const newConversations = prevConversations.map((conversation) => {\r\n          if (arrayEquality(conversation.recipients, recipients)) {\r\n            madeChange = true;\r\n            return {\r\n              ...conversation,\r\n              messages: [...conversation.messages, newMessage],\r\n            };\r\n          }\r\n\r\n          return conversation;\r\n        });\r\n\r\n        if (madeChange) {\r\n          return newConversations;\r\n        } else {\r\n          return [...prevConversations, { recipients, messages: [newMessage] }];\r\n        }\r\n      });\r\n    },\r\n    [setConversations]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return;\r\n\r\n    socket.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () => socket.off(\"receive-message\");\r\n  }, [socket, addMessageToConversation]);\r\n\r\n  function sendMessage(recipients, text) {\r\n    socket.emit(\"send-message\", { recipients, text });\r\n    addMessageToConversation({ recipients, text, sender: id });\r\n  }\r\n\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectedConversationIndex],\r\n    sendMessage,\r\n    selectConversationIndex: setSelectedConversationIndex,\r\n    createConversation,\r\n  };\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n  if (a.length !== b.length) return false;\r\n\r\n  a.sort();\r\n  b.sort();\r\n\r\n  return a.every((element, index) => {\r\n    return element === b[index];\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\n\r\nfunction CheckedAvatar() {\r\n  return (\r\n    <Avatar>\r\n      <CheckIcon />\r\n    </Avatar>\r\n  );\r\n}\r\n\r\nexport default CheckedAvatar;\r\n","import {\r\n  AppBar,\r\n  Avatar,\r\n  Divider,\r\n  Drawer,\r\n  Fab,\r\n  FormGroup,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Toolbar,\r\n  Zoom,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\r\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\r\nimport React, { useState } from \"react\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\nimport CheckedAvatar from \"./CheckedAvatar\";\r\n\r\nconst drawerWidth = 448;\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: drawerWidth,\r\n  },\r\n  menuButton: {\r\n    position: \"absolute\",\r\n    padding: \"0px\",\r\n    marginTop: \"50px\",\r\n    marginLeft: \"0px\",\r\n  },\r\n  appBar: {\r\n    background: \"#00BEA4\",\r\n    height: \"108px\",\r\n  },\r\n});\r\n\r\nexport default function NewGroup({ isOpen, close }) {\r\n  const classes = useStyles();\r\n  const { contacts } = useContacts();\r\n  const [selectedContactIds, setSelectedContactIds] = useState([]);\r\n  const { createConversation } = useConversations();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    // console.log(\"created\");\r\n    // console.log(selectedContactIds);\r\n    createConversation(selectedContactIds);\r\n    setSelectedContactIds([]);\r\n    close(false);\r\n  }\r\n\r\n  function handleCheckboxChange(contactId) {\r\n    setSelectedContactIds((prev) => {\r\n      if (prev.includes(contactId)) {\r\n        return prev.filter((prevId) => {\r\n          return contactId !== prevId;\r\n        });\r\n      } else {\r\n        return [...prev, contactId];\r\n      }\r\n    });\r\n  }\r\n\r\n  const list = (\r\n    <div\r\n      className={classes.list}\r\n      style={{ overflow: \"hidden scroll\", height: \"100%\" }}\r\n    >\r\n      <List>\r\n        {contacts && (\r\n          <form onSubmit={handleSubmit}>\r\n            {contacts.map((contact) => (\r\n              <FormGroup key={contact.id}>\r\n                <ListItem\r\n                  button\r\n                  onClick={() => handleCheckboxChange(contact.id)}\r\n                >\r\n                  <ListItemIcon>\r\n                    {selectedContactIds.includes(contact.id) ? (\r\n                      <CheckedAvatar />\r\n                    ) : (\r\n                      <Avatar />\r\n                    )}\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={contact.name} />\r\n                </ListItem>\r\n                <Divider light={true} />\r\n              </FormGroup>\r\n            ))}\r\n          </form>\r\n        )}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Drawer\r\n        anchor=\"left\"\r\n        open={isOpen}\r\n        variant=\"persistent\"\r\n        elevation=\"0\"\r\n        onClose={() => {\r\n          close(false);\r\n        }}\r\n      >\r\n        <AppBar\r\n          position=\"sticky\"\r\n          style={{ boxShadow: \"none\", width: `${drawerWidth}px` }}\r\n        >\r\n          <Toolbar variant=\"dense\" className={classes.appBar}>\r\n            <IconButton\r\n              edge=\"end\"\r\n              onClick={() => {\r\n                setSelectedContactIds([]);\r\n                close(false);\r\n              }}\r\n              className={classes.menuButton}\r\n              color=\"inherit\"\r\n              aria-label=\"menu\"\r\n            >\r\n              <KeyboardBackspaceIcon />\r\n            </IconButton>\r\n            <span\r\n              style={{\r\n                marginLeft: \"53px\",\r\n                marginTop: \"48px\",\r\n                fontSize: \"19px\",\r\n                fontWeight: \"500\",\r\n                color: \"#fff\",\r\n              }}\r\n            >\r\n              Add group participants\r\n            </span>\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        {list}\r\n        <AppBar\r\n          position=\"fixed\"\r\n          color=\"inherit\"\r\n          style={{\r\n            top: \"auto\",\r\n            bottom: 0,\r\n            left: 0,\r\n            width: `${drawerWidth}px`,\r\n            padding: \"10px\",\r\n            backgroundColor: \"#EDEDED\",\r\n            boxShadow: \"none\",\r\n            minHeight: \"62px\",\r\n            maxHeight: \"106px\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          {selectedContactIds.length > 0 && (\r\n            <Zoom in={selectedContactIds.length > 0}>\r\n              <Fab\r\n                size=\"medium\"\r\n                style={{\r\n                  background: \"#09E95F\",\r\n                  color: \"#ffffff\",\r\n                  marginBottom: \"22px\",\r\n                  marginTop: \"16px\",\r\n                  boxShadow: \"rgba(0, 0, 0, 0.4) 0px 1px 3px 0px\",\r\n                }}\r\n                onClick={handleSubmit}\r\n              >\r\n                <ArrowForwardIcon />\r\n              </Fab>\r\n            </Zoom>\r\n          )}\r\n        </AppBar>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\n\r\nfunction HomeMenu({ anchorEl, setAnchorEl, setDrawerOpen, setModalOpen }) {\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const logout = () => {\r\n    setAnchorEl(null);\r\n    localStorage.clear();\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <Menu\r\n      id=\"simple-menu\"\r\n      anchorEl={anchorEl}\r\n      keepMounted\r\n      open={Boolean(anchorEl)}\r\n      onClose={handleClose}\r\n      anchorOrigin={{\r\n        vertical: \"bottom\",\r\n        horizontal: \"left\",\r\n      }}\r\n      transformOrigin={{\r\n        vertical: \"bottom\",\r\n        horizontal: \"right\",\r\n      }}\r\n    >\r\n      <MenuItem\r\n        onClick={() => {\r\n          handleClose();\r\n          setDrawerOpen(true);\r\n        }}\r\n      >\r\n        New Group\r\n      </MenuItem>\r\n      <MenuItem\r\n        onClick={() => {\r\n          handleClose();\r\n          setModalOpen(true);\r\n        }}\r\n      >\r\n        New Contact\r\n      </MenuItem>\r\n      <MenuItem onClick={logout}>Logout</MenuItem>\r\n    </Menu>\r\n  );\r\n}\r\n\r\nexport default HomeMenu;\r\n","import React, { useRef } from \"react\";\r\nimport { Modal, Fade, TextField, Button, IconButton } from \"@material-ui/core\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport {\r\n  ThemeProvider,\r\n  withStyles,\r\n  makeStyles,\r\n  createTheme,\r\n} from \"@material-ui/core/styles\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: green,\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n    width: \"100%\",\r\n  },\r\n  box: {\r\n    boxShadow: \"0px 8px 15px rgba(0, 0, 0, 0.3)\",\r\n    width: \"50%\",\r\n    paddingTop: \"15px\",\r\n    marginTop: \"10px\",\r\n    overflow: \"hidden scroll\",\r\n  },\r\n}));\r\n\r\nconst ColorButton = withStyles((theme) => ({\r\n  root: {\r\n    color: theme.palette.getContrastText(\"#000\"),\r\n    backgroundColor: green[500],\r\n    borderRadius: \"0px\",\r\n    width: \"30%\",\r\n    \"&:hover\": {\r\n      backgroundColor: green[700],\r\n    },\r\n  },\r\n}))(Button);\r\n\r\nfunction NewContact({ modalOpen, setModalOpen }) {\r\n  const idRef = useRef();\r\n  const nameRef = useRef();\r\n  const classes = useStyles();\r\n  const { createContact } = useContacts();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    createContact(idRef.current.value, nameRef.current.value);\r\n    setModalOpen(false);\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      aria-labelledby=\"New contact modal\"\r\n      aria-describedby=\"Modal to add new contact\"\r\n      open={modalOpen}\r\n      onClose={() => {\r\n        setModalOpen(false);\r\n      }}\r\n      closeAfterTransition\r\n      BackdropProps={{\r\n        timeout: 500,\r\n      }}\r\n    >\r\n      <Fade in={modalOpen}>\r\n        <div\r\n          style={{\r\n            height: \"100vh\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              background: \"#fff\",\r\n              boxShadow: \"0px 8px 15px rgba(0, 0, 0, 0.3)\",\r\n              height: \"230px\",\r\n              width: \"50%\",\r\n              paddingTop: \"10px\",\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <IconButton\r\n              style={{\r\n                position: \"absolute\",\r\n                right: \"24.7%\",\r\n                top: \"30%\",\r\n              }}\r\n              onClick={() => {\r\n                setModalOpen(false);\r\n              }}\r\n            >\r\n              <CloseIcon style={{ fontSize: \"15px\" }} />\r\n            </IconButton>\r\n            <form\r\n              className={classes.root}\r\n              onSubmit={handleSubmit}\r\n              autoComplete=\"off\"\r\n            >\r\n              <ThemeProvider theme={theme}>\r\n                <TextField\r\n                  className={classes.margin}\r\n                  label=\"Id\"\r\n                  variant=\"outlined\"\r\n                  id=\"mui-theme-provider-standard-input1\"\r\n                  autoFocus=\"true\"\r\n                  inputRef={idRef}\r\n                  required\r\n                />\r\n                <TextField\r\n                  className={classes.margin}\r\n                  label=\"User Name\"\r\n                  name=\"user\"\r\n                  variant=\"outlined\"\r\n                  id=\"mui-theme-provider-standard-input2\"\r\n                  inputRef={nameRef}\r\n                  required\r\n                />\r\n              </ThemeProvider>\r\n              <ColorButton type=\"submit\" className={classes.margin}>\r\n                Add new contact\r\n              </ColorButton>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </Fade>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default NewContact;\r\n","import {\r\n  AppBar,\r\n  Avatar,\r\n  Divider,\r\n  Drawer,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Toolbar,\r\n  Typography,\r\n  CssBaseline,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport GroupIcon from \"@material-ui/icons/Group\";\r\nimport React, { useState } from \"react\";\r\nimport NewGroup from \"./NewGroup\";\r\nimport HomeMenu from \"./HomeMenu\";\r\nimport \"../App.css\";\r\nimport NewContact from \"./NewContact\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\n\r\nconst drawerWidth = 448;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  appBar: {\r\n    background: \"#ECECED\",\r\n    height: \"59px\",\r\n    paddingLeft: \"16px\",\r\n    borderBottom: \"1px solid #E0E0E0\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  menu: {\r\n    boxShadow: \"0px 8px 15px rgba(0, 0, 0, 0.3)\",\r\n    background: \"#fff\",\r\n    maxWidth: \"190px\",\r\n    zIndex: 10000,\r\n  },\r\n  menuButton: {\r\n    position: \"absolute\",\r\n    padding: \"0px\",\r\n    marginTop: \"17px\",\r\n    marginLeft: \"calc(100% - 42px)\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: theme.spacing(3),\r\n  },\r\n  scroll: {\r\n    overflow: \"hidden scroll\",\r\n    paddingRight: 0,\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nfunction Sidebar({ id, username }) {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n  const { conversations, selectConversationIndex } = useConversations();\r\n\r\n  const list = (\r\n    <List\r\n      style={{\r\n        padding: 0,\r\n      }}\r\n    >\r\n      {conversations &&\r\n        conversations.map((conversation, index) => (\r\n          <div>\r\n            <ListItem\r\n              button\r\n              key={index}\r\n              onClick={() => selectConversationIndex(index)}\r\n              selected={conversation.selected && { background: \"#EBEBEB\" }}\r\n            >\r\n              <ListItemIcon>\r\n                <Avatar>\r\n                  <GroupIcon />\r\n                </Avatar>\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                primary={\"Group \" + (index + 1)}\r\n                secondary={conversation.recipients\r\n                  .map((r) => r.name)\r\n                  .join(\",\")\r\n                  .concat(\",You\")}\r\n              />\r\n            </ListItem>\r\n            <Divider light={true} />\r\n          </div>\r\n        ))}\r\n    </List>\r\n  );\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n        anchor=\"left\"\r\n      >\r\n        <AppBar\r\n          position=\"sticky\"\r\n          style={{\r\n            boxShadow: \"none\",\r\n            width: `${drawerWidth}px `,\r\n            height: \"59px\",\r\n            // borderBottom: \"1px solid rgb(74, 74, 74)\",\r\n          }}\r\n        >\r\n          <Toolbar variant=\"dense\" className={classes.appBar}>\r\n            <Avatar style={{ marginLeft: 0 }} />\r\n            <Typography\r\n              variant=\"h6\"\r\n              color=\"dark\"\r\n              style={{ color: \"#000\", marginLeft: \"30px\" }}\r\n            >\r\n              {username}\r\n            </Typography>\r\n          </Toolbar>\r\n          <IconButton\r\n            edge=\"end\"\r\n            onClick={handleClick}\r\n            className={classes.menuButton}\r\n            color=\"dark\"\r\n            aria-label=\"menu\"\r\n          >\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n          <HomeMenu\r\n            anchorEl={anchorEl}\r\n            setAnchorEl={setAnchorEl}\r\n            setDrawerOpen={setDrawerOpen}\r\n            setModalOpen={setModalOpen}\r\n          />\r\n        </AppBar>\r\n\r\n        <div className={classes.scroll}>{list}</div>\r\n        <AppBar\r\n          position=\"fixed\"\r\n          color=\"inherit\"\r\n          style={{\r\n            top: \"auto\",\r\n            bottom: 0,\r\n            left: 0,\r\n            width: \"448px\",\r\n            padding: \"10px\",\r\n            backgroundColor: \"#EDEDED\",\r\n            boxShadow: \"none\",\r\n            height: \"62px\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            borderTop: \"1px solid #E0E0E0\",\r\n            borderRight: \"1px solid #E0E0E0\",\r\n          }}\r\n        >\r\n          Your Id : {id}\r\n        </AppBar>\r\n      </Drawer>\r\n      <NewContact modalOpen={modalOpen} setModalOpen={setModalOpen} />\r\n      <NewGroup isOpen={drawerOpen} close={setDrawerOpen} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\n\r\nfunction MessageOut({ fromMe }) {\r\n  if (fromMe)\r\n    return (\r\n      <span\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"-1px\",\r\n          right: \"-8px\",\r\n        }}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 8 13\"\r\n          width=\"8\"\r\n          height=\"13\"\r\n        >\r\n          <path\r\n            opacity=\".13\"\r\n            d=\"M5.188 1H0v11.193l6.467-8.625C7.526 2.156 6.958 1 5.188 1z\"\r\n          ></path>\r\n          <path\r\n            fill=\"#DCF8C6\"\r\n            d=\"M5.188 0H0v11.193l6.467-8.625C7.526 1.156 6.958 0 5.188 0z\"\r\n          ></path>\r\n        </svg>\r\n      </span>\r\n    );\r\n  else\r\n    return (\r\n      <span\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"-1px\",\r\n          left: \"-8px\",\r\n        }}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 8 13\"\r\n          width=\"8\"\r\n          height=\"13\"\r\n        >\r\n          <path\r\n            opacity=\".13\"\r\n            d=\"M1.533 3.568L8 12.193V1H2.812C1.042 1 .474 2.156 1.533 3.568z\"\r\n          ></path>\r\n          <path\r\n            fill=\"#FFFEFE\"\r\n            d=\"M1.533 2.568L8 11.193V0H2.812C1.042 0 .474 1.156 1.533 2.568z\"\r\n          ></path>\r\n        </svg>\r\n      </span>\r\n    );\r\n}\r\n\r\nexport default MessageOut;\r\n","import {\r\n  AppBar,\r\n  Avatar,\r\n  IconButton,\r\n  InputBase,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport DoneAllIcon from \"@material-ui/icons/DoneAll\";\r\nimport GroupIcon from \"@material-ui/icons/Group\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\nimport MessageOut from \"./MessageOut\";\r\n\r\nfunction OpenConversation() {\r\n  const { selectedConversation, sendMessage } = useConversations();\r\n  const lastMessageRef = useCallback((node) => {\r\n    if (node) {\r\n      node.scrollIntoView({ smooth: true });\r\n    }\r\n  }, []);\r\n  const [text, setText] = useState(\"\");\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (text.trim().length !== 0)\r\n      sendMessage(\r\n        selectedConversation.recipients.map((r) => r.id),\r\n        text\r\n      );\r\n    // console.log(selectedConversation.messages);\r\n    setText(\"\");\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        marginLeft: \"448px\",\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        flexGrow: \"1\",\r\n      }}\r\n    >\r\n      <AppBar\r\n        position=\"sticky\"\r\n        color=\"inherit\"\r\n        style={{\r\n          top: \"auto\",\r\n          bottom: 0,\r\n          left: 0,\r\n          padding: \"10px\",\r\n          backgroundColor: \"#EDEDED\",\r\n          boxShadow: \"none\",\r\n          maxHeight: \"59px\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"flex-start\",\r\n        }}\r\n      >\r\n        <ListItem>\r\n          <ListItemIcon>\r\n            <Avatar>\r\n              <GroupIcon />\r\n            </Avatar>\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary={\"Group \" + (selectedConversation.index + 1)}\r\n            secondary={selectedConversation.recipients\r\n              .map((r) => r.name)\r\n              .join(\",\")\r\n              .concat(\",You\")}\r\n          />\r\n        </ListItem>\r\n      </AppBar>\r\n      {/* 1 */}\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          flexGrow: \"1\",\r\n          height: \"100%\",\r\n          overflow: \"auto\",\r\n          backgroundColor: \"#E4DCD5\",\r\n          backgroundImage: \"url('bg-chat-tile-light.svg')\",\r\n          backgroundSize: \"540px\",\r\n          backgroundPosition: \"0% 12%\",\r\n        }}\r\n      >\r\n        {/* 2 */}\r\n        <div\r\n          style={{\r\n            flexGrow: \"1\",\r\n          }}\r\n        >\r\n          {/* 3 */}\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              height: \"100%\",\r\n              flexDirection: \"column\",\r\n              flexGrow: \"1\",\r\n              alignItems: \"flex-start\",\r\n              justifyContent: \"flex-end\",\r\n              padding: \"2px 80px\",\r\n            }}\r\n          >\r\n            {selectedConversation.messages.map((message, index) => {\r\n              return (\r\n                <div\r\n                  ref={\r\n                    index === selectedConversation.messages.length - 1\r\n                      ? lastMessageRef\r\n                      : null\r\n                  }\r\n                  key={index}\r\n                  style={{\r\n                    marginTop: \"2px\",\r\n                    marginBottom: \"2px\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignSelf: message.fromMe ? \"flex-end\" : \"flex-start\",\r\n                  }}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      position: \"relative\",\r\n                      display: \"flex\",\r\n                      flexDirection: \"column\",\r\n                      maxWidth: \"500px\",\r\n                      overflowWrap: \"anywhere\",\r\n                      borderRadius: message.fromMe\r\n                        ? \"8px 0 8px 8px\"\r\n                        : \"0 8px 8px 8px\",\r\n                      boxShadow: \"0 1px 0.5px rgba(0,0,0,.13)\",\r\n                      marginBottom: \"10px\",\r\n                      padding: \"6px 7px 8px 9px\",\r\n                      backgroundColor: message.fromMe ? \"#DCF8C6\" : \"#FFFEFE\",\r\n                    }}\r\n                  >\r\n                    <MessageOut fromMe={message.fromMe} />\r\n                    {message.text}\r\n                    <div\r\n                      style={{\r\n                        // alignSelf: \"flex-end\",\r\n                        fontSize: \"11px\",\r\n                        opacity: \"0.6\",\r\n                        display: \"flex\",\r\n                        alignSelf: message.fromMe ? \"flex-end\" : \"flex-start\",\r\n                      }}\r\n                    >\r\n                      {message.fromMe ? \"You\" : message.senderName}\r\n                      {message.fromMe && (\r\n                        <DoneAllIcon\r\n                          style={{ fontSize: 15, marginLeft: \"3px\" }}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Paper\r\n        component=\"form\"\r\n        onSubmit={handleSubmit}\r\n        elevation={0}\r\n        square\r\n        style={{\r\n          background: \"#EDEDED\",\r\n          minHeight: \"62px\",\r\n          // height: \"max-content\",\r\n          // maxHeight: \"62px\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"flex-end\",\r\n          flexGrow: \"1\",\r\n          padding: \"7px 10px\",\r\n          witdh: \"100%\",\r\n        }}\r\n      >\r\n        <InputBase\r\n          multiline\r\n          rowsMax={5}\r\n          value={text}\r\n          onKeyUp={(e) => {\r\n            if (!e.shiftKey && e.code === \"Enter\") {\r\n              handleSubmit(e);\r\n            }\r\n          }}\r\n          onChange={(e) => setText(e.target.value)}\r\n          style={{\r\n            borderRadius: \"25px\",\r\n            background: \"#fff\",\r\n            // witdh: \"90%\",\r\n            flexGrow: \"1\",\r\n            margin: \"2px 10px\",\r\n            padding: \"12px 12px 12px\",\r\n          }}\r\n          placeholder=\"Type a message\"\r\n          inputProps={{\r\n            \"aria-label\": \"Type a message\",\r\n          }}\r\n        />\r\n        <IconButton type=\"submit\">\r\n          <SendIcon />\r\n        </IconButton>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OpenConversation;\r\n","import React from \"react\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport OpenConversation from \"./OpenConversation\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\n\r\nfunction Dashboard({ id, username }) {\r\n  const { selectedConversation } = useConversations();\r\n  return (\r\n    <>\r\n      <Sidebar id={id} username={username} />\r\n      {selectedConversation && <OpenConversation />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\nimport Login from \"./components/Login\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Dashboard from \"./components/Dashboard\";\nimport { ContactsProvider } from \"./contexts/ContactsProvider\";\nimport { ConversationsProvider } from \"./contexts/ConversationsProvider\";\nimport { SocketProvider } from \"./contexts/SocketProvider\";\n\nfunction App() {\n  const [id, setId] = useLocalStorage(\"id\", 0);\n  const [user, setUser] = useLocalStorage(\"user\", \"whatsapp\");\n  const dashboard = (\n    <SocketProvider id={id}>\n      <ContactsProvider>\n        <ConversationsProvider id={id}>\n          <Dashboard id={id} username={user} />\n        </ConversationsProvider>\n      </ContactsProvider>\n    </SocketProvider>\n  );\n  return (\n    <div>\n      {id !== 0 ? (\n        dashboard\n      ) : (\n        <div\n          style={{\n            height: \"100vh\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Login onIdSubmit={setId} getUser={setUser} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}